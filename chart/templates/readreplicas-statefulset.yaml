apiVersion: "apps/v1beta2"
kind: StatefulSet
metadata:
  name: "{{ template "neo4j.replica.fullname" . }}"
spec:
  serviceName: {{ template "neo4j.name" . }}-readreplica
{{- if lt .Values.coreServers 3.0 }}
  # Replicas are only meaningful if we have a core set.  Single mode operations here.
  replicas: 0
{{ else }}  
  replicas: {{ .Values.readReplicaServers }}
{{- end }}
  selector:
    matchLabels:
      release: {{ .Values.name | quote }}
      app: {{ template "neo4j.name" . }}
      component: readreplica
  template:
    metadata:
      labels:
        release: {{ .Values.name | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        app: {{ template "neo4j.name" . }}
        component: readreplica
    spec:
      containers:
      - name: {{ template "neo4j.fullname" . }}
        image: "{{ .Values.image }}"
        imagePullPolicy: "{{ .Values.imagePullPolicy }}"
        # Most pod config is factored into a different configMap, which is user overrideable.
        envFrom:
          - configMapRef:
              {{- if .Values.readReplica.configMap }}
              name: "{{ .Values.readReplica.configMap }}"
              {{- else }}
              name: {{ template "neo4j.replicaConfig.fullname" . }}
              {{- end }}
        env:
          {{- if .Values.authEnabled }}
          - name: NEO4J_SECRETS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ template "neo4j.secrets.fullname" . }}
                key: neo4j-password
          {{- end }}
        command:
          - "/bin/bash"
          - "-c"
          - |
            # Replicas advertise by bare IP, not hostname.  This is because deployments in kubernetes
            # don't provide good FQDNs. (https://github.com/kubernetes/kubernetes/issues/60789)
            # The FQDN advertisement address is necessary for the akka cluster formation in Neo4j to work,
            # so if you advertise with a bare local hostname or something invalid, the read replica will be
            # unable to join the raft group.
            export HOST=$(hostname -i)
            export NEO4J_causal__clustering_discovery__advertised__address=${NEO4J_causal__clustering_discovery__advertised__address:-$HOST}
            export NEO4J_dbms_default__advertised__address=${NEO4J_dbms_default__advertised__address:-$HOST}
            export NEO4J_dbms_connector_bolt_advertised__address=${NEO4J_dbms_connector_bolt_advertised__address:-$HOST}
            export NEO4J_dbms_connector_http_advertised__address=${NEO4J_dbms_connector_http_advertised__address:-$HOST}
            export NEO4J_dbms_connector_https_advertised__address=${NEO4J_dbms_connector_https_advertised__address:-$HOST}

            # These settings are *not* overrideable, because they must match the addresses the
            # core members see to avoid akka rejections.
            export NEO4J_causal__clustering_discovery__advertised__address=$HOST:5000
            export NEO4J_causal__clustering_transaction__advertised__address=$HOST:6000
            export NEO4J_causal__clustering_raft__advertised__address=$HOST:7000

            if [ "${AUTH_ENABLED:-}" == "true" ]; then
              export NEO4J_AUTH="neo4j/${NEO4J_SECRETS_PASSWORD}"
            else
              export NEO4J_AUTH="none"
            fi

            echo "Starting Neo4j READ_REPLICA on $HOST"
            exec /docker-entrypoint.sh "neo4j"
        ports:
        - containerPort: 6000
          name: tx
        - containerPort: 7474
          name: browserhttp
        - containerPort: 7473
          name: browserhttps
        - containerPort: 7687
          name: bolt
        # securityContext:
        #   privileged: true
        volumeMounts:
        - name: datadir
          mountPath: "{{ .Values.volumeMountPath }}"
          {{- if .Values.volumeSubPath }}
          subPath: {{ .Values.volumeSubPath }}
          {{- end }}
        # Users may uncomment this and adjust that mount point to 
        # attach custom plugins.  For now, plugins are injected into the
        # solution container.        
        #- name: plugins
        #  mountPath: /plugins
        readinessProbe:
          tcpSocket:
            port: {{ .Values.ports.bolt }}
          initialDelaySeconds: 30
          periodSeconds: 3
        livenessProbe:
          initialDelaySeconds: 60
          tcpSocket:
            port: {{ .Values.ports.bolt }}
        resources:
          requests:
            cpu: "{{ .Values.cpuRequest }}"
            memory: "{{ .Values.memoryRequest }}"
          limits:
            cpu: "{{ .Values.cpuLimit }}"
            memory: "{{ .Values.memoryLimit }}"
{{- if .Values.coreSidecarContainers }}
{{ toYaml .Values.coreSidecarContainers | indent 6 }}
{{- end }}
{{- if .Values.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecret }}
{{- end -}}
{{- if .Values.coreInitContainers }}
      initContainers:
{{ toYaml .Values.coreInitContainers | indent 6 }}
{{- end }}
      volumes:
        - name: plugins
          emptyDir: {}
{{- if .Values.maintenanceServiceKeySecret }}
        - name: "{{ .Values.maintenanceServiceKeySecret }}"
          secret:
            secretName: "{{ .Values.maintenanceServiceKeySecret }}"
{{- end }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
        {{- if .Values.volumeAnnotations }}
{{ toYaml .Values.volumeAnnotations | indent 12 }}
        {{- end }}
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: "{{ .Values.volumeStorageClass }}"
        resources:
          requests:
            storage: "{{ .Values.volumeSize }}"
